{
  "version": 3,
  "sources": ["../../node_modules/es-hangul/dist/index.mjs"],
  "sourcesContent": ["// src/constants.ts\nvar COMPLETE_HANGUL_START_CHARCODE = \"\\uAC00\".charCodeAt(0);\nvar COMPLETE_HANGUL_END_CHARCODE = \"\\uD7A3\".charCodeAt(0);\nvar NUMBER_OF_JONGSUNG = 28;\nvar NUMBER_OF_JUNGSUNG = 21;\nvar DISASSEMBLED_CONSONANTS_BY_CONSONANT = {\n  // 종성이 없는 경우 '빈' 초성으로 관리하는 것이 편리하여, 빈 문자열도 포함한다.\n  \"\": \"\",\n  \\u3131: \"\\u3131\",\n  \\u3132: \"\\u3132\",\n  \\u3133: \"\\u3131\\u3145\",\n  \\u3134: \"\\u3134\",\n  \\u3135: \"\\u3134\\u3148\",\n  \\u3136: \"\\u3134\\u314E\",\n  \\u3137: \"\\u3137\",\n  \\u3138: \"\\u3138\",\n  \\u3139: \"\\u3139\",\n  \\u313A: \"\\u3139\\u3131\",\n  \\u313B: \"\\u3139\\u3141\",\n  \\u313C: \"\\u3139\\u3142\",\n  \\u313D: \"\\u3139\\u3145\",\n  \\u313E: \"\\u3139\\u314C\",\n  \\u313F: \"\\u3139\\u314D\",\n  \\u3140: \"\\u3139\\u314E\",\n  \\u3141: \"\\u3141\",\n  \\u3142: \"\\u3142\",\n  \\u3143: \"\\u3143\",\n  \\u3144: \"\\u3142\\u3145\",\n  \\u3145: \"\\u3145\",\n  \\u3146: \"\\u3146\",\n  \\u3147: \"\\u3147\",\n  \\u3148: \"\\u3148\",\n  \\u3149: \"\\u3149\",\n  \\u314A: \"\\u314A\",\n  \\u314B: \"\\u314B\",\n  \\u314C: \"\\u314C\",\n  \\u314D: \"\\u314D\",\n  \\u314E: \"\\u314E\"\n};\nvar DISASSEMBLED_VOWELS_BY_VOWEL = {\n  \\u314F: \"\\u314F\",\n  \\u3150: \"\\u3150\",\n  \\u3151: \"\\u3151\",\n  \\u3152: \"\\u3152\",\n  \\u3153: \"\\u3153\",\n  \\u3154: \"\\u3154\",\n  \\u3155: \"\\u3155\",\n  \\u3156: \"\\u3156\",\n  \\u3157: \"\\u3157\",\n  \\u3158: \"\\u3157\\u314F\",\n  \\u3159: \"\\u3157\\u3150\",\n  \\u315A: \"\\u3157\\u3163\",\n  \\u315B: \"\\u315B\",\n  \\u315C: \"\\u315C\",\n  \\u315D: \"\\u315C\\u3153\",\n  \\u315E: \"\\u315C\\u3154\",\n  \\u315F: \"\\u315C\\u3163\",\n  \\u3160: \"\\u3160\",\n  \\u3161: \"\\u3161\",\n  \\u3162: \"\\u3161\\u3163\",\n  \\u3163: \"\\u3163\"\n};\nvar HANGUL_CHARACTERS_BY_FIRST_INDEX = [\n  \"\\u3131\",\n  \"\\u3132\",\n  \"\\u3134\",\n  \"\\u3137\",\n  \"\\u3138\",\n  \"\\u3139\",\n  \"\\u3141\",\n  \"\\u3142\",\n  \"\\u3143\",\n  \"\\u3145\",\n  \"\\u3146\",\n  \"\\u3147\",\n  \"\\u3148\",\n  \"\\u3149\",\n  \"\\u314A\",\n  \"\\u314B\",\n  \"\\u314C\",\n  \"\\u314D\",\n  \"\\u314E\"\n];\nvar HANGUL_CHARACTERS_BY_MIDDLE_INDEX = Object.values(DISASSEMBLED_VOWELS_BY_VOWEL);\nvar HANGUL_CHARACTERS_BY_LAST_INDEX = [\n  \"\",\n  \"\\u3131\",\n  \"\\u3132\",\n  \"\\u3133\",\n  \"\\u3134\",\n  \"\\u3135\",\n  \"\\u3136\",\n  \"\\u3137\",\n  \"\\u3139\",\n  \"\\u313A\",\n  \"\\u313B\",\n  \"\\u313C\",\n  \"\\u313D\",\n  \"\\u313E\",\n  \"\\u313F\",\n  \"\\u3140\",\n  \"\\u3141\",\n  \"\\u3142\",\n  \"\\u3144\",\n  \"\\u3145\",\n  \"\\u3146\",\n  \"\\u3147\",\n  \"\\u3148\",\n  \"\\u314A\",\n  \"\\u314B\",\n  \"\\u314C\",\n  \"\\u314D\",\n  \"\\u314E\"\n].map((consonant) => DISASSEMBLED_CONSONANTS_BY_CONSONANT[consonant]);\nvar QWERTY_KEYBOARD_MAP = {\n  q: \"\\u3142\",\n  Q: \"\\u3143\",\n  w: \"\\u3148\",\n  W: \"\\u3149\",\n  e: \"\\u3137\",\n  E: \"\\u3138\",\n  r: \"\\u3131\",\n  R: \"\\u3132\",\n  t: \"\\u3145\",\n  T: \"\\u3146\",\n  y: \"\\u315B\",\n  Y: \"\\u315B\",\n  u: \"\\u3155\",\n  U: \"\\u3155\",\n  i: \"\\u3151\",\n  I: \"\\u3151\",\n  o: \"\\u3150\",\n  O: \"\\u3152\",\n  p: \"\\u3154\",\n  P: \"\\u3156\",\n  a: \"\\u3141\",\n  A: \"\\u3141\",\n  s: \"\\u3134\",\n  S: \"\\u3134\",\n  d: \"\\u3147\",\n  D: \"\\u3147\",\n  f: \"\\u3139\",\n  F: \"\\u3139\",\n  g: \"\\u314E\",\n  G: \"\\u314E\",\n  h: \"\\u3157\",\n  H: \"\\u3157\",\n  j: \"\\u3153\",\n  J: \"\\u3153\",\n  k: \"\\u314F\",\n  K: \"\\u314F\",\n  l: \"\\u3163\",\n  L: \"\\u3163\",\n  z: \"\\u314B\",\n  Z: \"\\u314B\",\n  x: \"\\u314C\",\n  X: \"\\u314C\",\n  c: \"\\u314A\",\n  C: \"\\u314A\",\n  v: \"\\u314D\",\n  V: \"\\u314D\",\n  b: \"\\u3160\",\n  B: \"\\u3160\",\n  n: \"\\u315C\",\n  N: \"\\u315C\",\n  m: \"\\u3161\",\n  M: \"\\u3161\"\n};\n\n// src/disassembleCompleteHangulCharacter.ts\nfunction disassembleCompleteHangulCharacter(letter) {\n  const charCode = letter.charCodeAt(0);\n  const isCompleteHangul = COMPLETE_HANGUL_START_CHARCODE <= charCode && charCode <= COMPLETE_HANGUL_END_CHARCODE;\n  if (!isCompleteHangul) {\n    return void 0;\n  }\n  const hangulCode = charCode - COMPLETE_HANGUL_START_CHARCODE;\n  const lastIndex = hangulCode % NUMBER_OF_JONGSUNG;\n  const middleIndex = (hangulCode - lastIndex) / NUMBER_OF_JONGSUNG % NUMBER_OF_JUNGSUNG;\n  const firstIndex = Math.floor((hangulCode - lastIndex) / NUMBER_OF_JONGSUNG / NUMBER_OF_JUNGSUNG);\n  return {\n    first: HANGUL_CHARACTERS_BY_FIRST_INDEX[firstIndex],\n    middle: HANGUL_CHARACTERS_BY_MIDDLE_INDEX[middleIndex],\n    last: HANGUL_CHARACTERS_BY_LAST_INDEX[lastIndex]\n  };\n}\n\n// src/utils.ts\nfunction hasBatchim(str) {\n  const lastChar = str[str.length - 1];\n  if (lastChar == null) {\n    return false;\n  }\n  const disassembled = disassembleCompleteHangulCharacter(lastChar);\n  return disassembled != null && disassembled.last !== \"\";\n}\nfunction hasSingleBatchim(str) {\n  const lastChar = str[str.length - 1];\n  if (lastChar == null || hasBatchim(lastChar) === false) {\n    return false;\n  }\n  const disassembled = disassembleHangul(lastChar);\n  return disassembled.length === 3;\n}\nfunction getChosung(word) {\n  return disassembleHangulToGroups(word).reduce((chosung, [consonant]) => {\n    return `${chosung}${consonant}`;\n  }, \"\");\n}\nfunction getFirstConsonants(word) {\n  return disassembleHangulToGroups(word).reduce((firstConsonants, [consonant]) => {\n    return `${firstConsonants}${consonant}`;\n  }, \"\");\n}\nfunction canBeChosung(character) {\n  return hasValueInReadOnlyStringList(HANGUL_CHARACTERS_BY_FIRST_INDEX, character);\n}\nfunction canBeJungsung(character) {\n  return hasValueInReadOnlyStringList(HANGUL_CHARACTERS_BY_MIDDLE_INDEX, character);\n}\nfunction canBeJongsung(character) {\n  return hasValueInReadOnlyStringList(HANGUL_CHARACTERS_BY_LAST_INDEX, character);\n}\nfunction hasValueInReadOnlyStringList(list, value) {\n  return list.some((item) => item === value);\n}\nfunction hasProperty(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n// src/disassemble.ts\nfunction disassembleHangulToGroups(str) {\n  const result = [];\n  for (const letter of str) {\n    const disassembledComplete = disassembleCompleteHangulCharacter(letter);\n    if (disassembledComplete != null) {\n      result.push([...disassembledComplete.first, ...disassembledComplete.middle, ...disassembledComplete.last]);\n      continue;\n    }\n    if (hasProperty(DISASSEMBLED_CONSONANTS_BY_CONSONANT, letter)) {\n      const disassembledConsonant = DISASSEMBLED_CONSONANTS_BY_CONSONANT[letter];\n      result.push([...disassembledConsonant]);\n      continue;\n    }\n    if (hasProperty(DISASSEMBLED_VOWELS_BY_VOWEL, letter)) {\n      const disassembledVowel = DISASSEMBLED_VOWELS_BY_VOWEL[letter];\n      result.push([...disassembledVowel]);\n      continue;\n    }\n    result.push([letter]);\n  }\n  return result;\n}\nfunction disassembleHangul(str) {\n  return disassembleHangulToGroups(str).reduce((hanguls, disassembleds) => `${hanguls}${disassembleds.join(\"\")}`, \"\");\n}\n\n// src/_internal/index.ts\nfunction excludeLastElement(array) {\n  const lastElement = array[array.length - 1];\n  return [array.slice(0, -1), lastElement != null ? lastElement : \"\"];\n}\nfunction joinString(...args) {\n  return args.join(\"\");\n}\nfunction isBlank(character) {\n  return /^\\s$/.test(character);\n}\nfunction assert(condition, errorMessage) {\n  if (condition === false) {\n    throw new Error(errorMessage != null ? errorMessage : \"Invalid condition\");\n  }\n}\n\n// src/combineHangulCharacter.ts\nfunction combineHangulCharacter(firstCharacter, middleCharacter, lastCharacter = \"\") {\n  if (canBeChosung(firstCharacter) === false || canBeJungsung(middleCharacter) === false || canBeJongsung(lastCharacter) === false) {\n    throw new Error(`Invalid hangul Characters: ${firstCharacter}, ${middleCharacter}, ${lastCharacter}`);\n  }\n  const numOfMiddleCharacters = HANGUL_CHARACTERS_BY_MIDDLE_INDEX.length;\n  const numOfLastCharacters = HANGUL_CHARACTERS_BY_LAST_INDEX.length;\n  const firstCharacterIndex = HANGUL_CHARACTERS_BY_FIRST_INDEX.indexOf(firstCharacter);\n  const middleCharacterIndex = HANGUL_CHARACTERS_BY_MIDDLE_INDEX.indexOf(middleCharacter);\n  const lastCharacterIndex = HANGUL_CHARACTERS_BY_LAST_INDEX.indexOf(lastCharacter);\n  const firstIndexOfTargetConsonant = firstCharacterIndex * numOfMiddleCharacters * numOfLastCharacters;\n  const firstIndexOfTargetVowel = middleCharacterIndex * numOfLastCharacters;\n  const unicode = COMPLETE_HANGUL_START_CHARCODE + firstIndexOfTargetConsonant + firstIndexOfTargetVowel + lastCharacterIndex;\n  return String.fromCharCode(unicode);\n}\nvar curriedCombineHangulCharacter = (firstCharacter) => (middleCharacter) => (lastCharacter = \"\") => combineHangulCharacter(firstCharacter, middleCharacter, lastCharacter);\nvar combineVowels = (vowel1, vowel2) => {\n  var _a, _b;\n  return (_b = (_a = Object.entries(DISASSEMBLED_VOWELS_BY_VOWEL).find(([, value]) => value === `${vowel1}${vowel2}`)) == null ? void 0 : _a[0]) != null ? _b : `${vowel1}${vowel2}`;\n};\n\n// src/removeLastHangulCharacter.ts\nfunction removeLastHangulCharacter(words) {\n  const disassembledGroups = disassembleHangulToGroups(words);\n  const lastCharacter = disassembledGroups.at(-1);\n  if (lastCharacter == null) {\n    return \"\";\n  }\n  const withoutLastCharacter = disassembledGroups.filter((v) => v !== lastCharacter).map(([first2, middle2, last2]) => {\n    if (middle2 != null) {\n      return combineHangulCharacter(first2, middle2, last2);\n    }\n    return first2;\n  });\n  const [[first, middle, last]] = excludeLastElement(lastCharacter);\n  const result = middle != null ? combineHangulCharacter(first, middle, last) : first;\n  return [...withoutLastCharacter, result].join(\"\");\n}\n\n// src/_internal/hangul.ts\nfunction isHangulCharacter(character) {\n  return /^[가-힣]$/.test(character);\n}\nfunction isHangulAlphabet(character) {\n  return /^[ㄱ-ㅣ]$/.test(character);\n}\nfunction binaryAssembleHangulAlphabets(source, nextCharacter) {\n  if (canBeJungsung(`${source}${nextCharacter}`)) {\n    return combineVowels(source, nextCharacter);\n  }\n  const isConsonantSource = canBeJungsung(source) === false;\n  if (isConsonantSource && canBeJungsung(nextCharacter)) {\n    return combineHangulCharacter(source, nextCharacter);\n  }\n  return joinString(source, nextCharacter);\n}\nfunction linkHangulCharacters(source, nextCharacter) {\n  const sourceJamo = disassembleHangulToGroups(source)[0];\n  const [, lastJamo] = excludeLastElement(sourceJamo);\n  return joinString(removeLastHangulCharacter(source), combineHangulCharacter(lastJamo, nextCharacter));\n}\nfunction binaryAssembleHangulCharacters(source, nextCharacter) {\n  assert(\n    isHangulCharacter(source) || isHangulAlphabet(source),\n    `Invalid source character: ${source}. Source must be one character.`\n  );\n  assert(\n    isHangulAlphabet(nextCharacter),\n    `Invalid next character: ${nextCharacter}. Next character must be one of the chosung, jungsung, or jongsung.`\n  );\n  const sourceJamos = disassembleHangulToGroups(source)[0];\n  const isSingleCharacter = sourceJamos.length === 1;\n  if (isSingleCharacter) {\n    const sourceCharacter = sourceJamos[0];\n    return binaryAssembleHangulAlphabets(sourceCharacter, nextCharacter);\n  }\n  const [restJamos, lastJamo] = excludeLastElement(sourceJamos);\n  const needLinking = canBeChosung(lastJamo) && canBeJungsung(nextCharacter);\n  if (needLinking) {\n    return linkHangulCharacters(source, nextCharacter);\n  }\n  const fixConsonant = curriedCombineHangulCharacter;\n  const combineJungsung = fixConsonant(restJamos[0]);\n  if (canBeJungsung(`${lastJamo}${nextCharacter}`)) {\n    return combineJungsung(`${lastJamo}${nextCharacter}`)();\n  }\n  if (canBeJungsung(lastJamo) && canBeJongsung(nextCharacter)) {\n    return combineJungsung(lastJamo)(nextCharacter);\n  }\n  const fixVowel = combineJungsung;\n  const combineJongsung = fixVowel(restJamos[1]);\n  const lastConsonant = lastJamo;\n  if (hasSingleBatchim(source) && canBeJongsung(`${lastConsonant}${nextCharacter}`)) {\n    return combineJongsung(`${lastConsonant}${nextCharacter}`);\n  }\n  return joinString(source, nextCharacter);\n}\nfunction binaryAssembleHangul(source, nextCharacter) {\n  const [rest, lastCharacter] = excludeLastElement(source.split(\"\"));\n  const needJoinString = isBlank(lastCharacter) || isBlank(nextCharacter);\n  return joinString(\n    ...rest,\n    needJoinString ? joinString(lastCharacter, nextCharacter) : binaryAssembleHangulCharacters(lastCharacter, nextCharacter)\n  );\n}\n\n// src/assemble.ts\nfunction assembleHangul(words) {\n  const disassembled = disassembleHangul(words.join(\"\")).split(\"\");\n  return disassembled.reduce(binaryAssembleHangul);\n}\n\n// src/chosungIncludes.ts\nfunction chosungIncludes(x, y) {\n  const trimmedY = y.replace(/\\s/g, \"\");\n  if (!isOnlyChosung(trimmedY)) {\n    return false;\n  }\n  const chosungX = getChosung(x).replace(/\\s/g, \"\");\n  const chosungY = trimmedY;\n  return chosungX.includes(chosungY);\n}\nfunction isOnlyChosung(str) {\n  const groups = disassembleHangulToGroups(str);\n  if (groups.length === 0) {\n    return false;\n  }\n  return groups.every((disassembled) => {\n    return disassembled.length === 1 && canBeChosung(disassembled[0]);\n  });\n}\n\n// src/convertQwertyToHangulAlphabet.ts\nfunction convertQwertyToHangulAlphabet(word) {\n  return word.split(\"\").map((inputText) => hasProperty(QWERTY_KEYBOARD_MAP, inputText) ? QWERTY_KEYBOARD_MAP[inputText] : inputText).join(\"\");\n}\nfunction convertQwertyToHangul(word) {\n  if (!word) {\n    return \"\";\n  }\n  return assembleHangul([...convertQwertyToHangulAlphabet(word)]);\n}\n\n// src/hangulIncludes.ts\nfunction hangulIncludes(x, y) {\n  const disassembledX = disassembleHangul(x);\n  const disassembledY = disassembleHangul(y);\n  return disassembledX.includes(disassembledY);\n}\n\n// src/josa.ts\nvar \\uB85C_\\uC870\\uC0AC = [\"\\uC73C\\uB85C/\\uB85C\", \"\\uC73C\\uB85C\\uC11C/\\uB85C\\uC11C\", \"\\uC73C\\uB85C\\uC368/\\uB85C\\uC368\", \"\\uC73C\\uB85C\\uBD80\\uD130/\\uB85C\\uBD80\\uD130\"];\nfunction josa(word, josa2) {\n  if (word.length === 0) {\n    return word;\n  }\n  return word + josaPicker(word, josa2);\n}\njosa.pick = josaPicker;\nfunction josaPicker(word, josa2) {\n  var _a;\n  if (word.length === 0) {\n    return josa2.split(\"/\")[0];\n  }\n  const has\\uBC1B\\uCE68 = hasBatchim(word);\n  let index = has\\uBC1B\\uCE68 ? 0 : 1;\n  const is\\uC885\\uC131\\u3139 = ((_a = disassembleCompleteHangulCharacter(word[word.length - 1])) == null ? void 0 : _a.last) === \"\\u3139\";\n  const isCaseOf\\uB85C = has\\uBC1B\\uCE68 && is\\uC885\\uC131\\u3139 && \\uB85C_\\uC870\\uC0AC.includes(josa2);\n  if (josa2 === \"\\uC640/\\uACFC\" || isCaseOf\\uB85C) {\n    index = index === 0 ? 1 : 0;\n  }\n  const isEndsWith\\uC774 = word[word.length - 1] === \"\\uC774\";\n  if (josa2 === \"\\uC774\\uC5D0\\uC694/\\uC608\\uC694\" && isEndsWith\\uC774) {\n    index = 1;\n  }\n  return josa2.split(\"/\")[index];\n}\nexport {\n  assembleHangul,\n  canBeChosung,\n  canBeJongsung,\n  canBeJungsung,\n  chosungIncludes,\n  combineHangulCharacter,\n  combineVowels,\n  convertQwertyToHangul,\n  convertQwertyToHangulAlphabet,\n  curriedCombineHangulCharacter,\n  disassembleCompleteHangulCharacter,\n  disassembleHangul,\n  disassembleHangulToGroups,\n  getChosung,\n  getFirstConsonants,\n  hangulIncludes,\n  hasBatchim,\n  hasProperty,\n  hasSingleBatchim,\n  hasValueInReadOnlyStringList,\n  josa,\n  removeLastHangulCharacter\n};\n"],
  "mappings": "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",
  "names": []
}
